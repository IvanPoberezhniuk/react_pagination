{"version":3,"sources":["components/LoadIcon.jsx","components/Pagination.jsx","api/requests.js","App.jsx","index.js"],"names":["LoadIcon","react_default","a","createElement","class","randomstring","require","Pagination","_ref","prevPage","nextPage","pagesCount","changePage","currentPage","postsPerPage","pagindationButtons","Array","fill","className","onClick","map","value","index","advancedButtons","concat","key","generate","URL","App","state","posts","error","isLoaded","pageNum","_this","setState","changePostsPerPage","event","newPostPerPage","target","prevState","Math","ceil","length","spliceList","_this$state","slice","min","max","_this2","this","setTimeout","Object","asyncToGenerator","regenerator_default","mark","_callee","postsList","wrap","_context","prev","next","fetch","then","res","json","sent","err","stop","_this$state2","postsForRender","htmlFor","defaultValue","name","onChange","id","post","title","components_LoadIcon","components_Pagination","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0959bed3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LoadIcon = () => {\r\n  return (\r\n    <div class=\"lds-ring\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadIcon;\r\n","import React from 'react';\r\nconst randomstring = require('randomstring');\r\n\r\nconst Pagination = ({\r\n  prevPage,\r\n  nextPage,\r\n  pagesCount,\r\n  changePage,\r\n  currentPage,\r\n  postsPerPage\r\n}) => {\r\n  const pagindationButtons = new Array(pagesCount).fill('');\r\n\r\n  const advancedButtons = index => {\r\n    switch (index) {\r\n      case 0:\r\n        return true;\r\n      case currentPage - 1:\r\n        return true;\r\n      case currentPage:\r\n        return true;\r\n      case currentPage + 1:\r\n        return true;\r\n      case postsPerPage - 1:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <li className=\"pagination__button\" onClick={prevPage}>\r\n        &laquo;\r\n      </li>\r\n      {pagindationButtons.map((value, index) =>\r\n        advancedButtons(index) ? (\r\n          <li\r\n            className={`pagination__button ${\r\n              currentPage === index ? 'pagination__button--active' : null\r\n            }`}\r\n            key={randomstring.generate(5)}\r\n            onClick={() => changePage(index)}\r\n          >\r\n            {index + 1}\r\n          </li>\r\n        ) : null\r\n      )}\r\n      <li className=\"pagination__button\" onClick={nextPage}>\r\n        &raquo;\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","const URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = () => fetch(`${URL}/posts`).then(res => res.json());\nexport const getUsers = () => fetch(`${URL}/users`).then(res => res.json());\nexport const getCom = () => fetch(`${URL}/comments`).then(res => res.json());\n","import React from 'react';\nimport './App.scss';\nimport LoadIcon from './components/LoadIcon';\nimport Pagination from './components/Pagination';\nimport { getPosts } from './api/requests';\n\nconst randomstring = require('randomstring');\n\nclass App extends React.Component {\n  state = {\n    posts: [],\n    error: null,\n    isLoaded: false,\n    currentPage: 0,\n    postsPerPage: 10,\n    pagesCount: ''\n  };\n\n  componentDidMount() {\n    // 3ms response simulation\n    setTimeout(async () => {\n      const postsList = await getPosts();\n\n      try {\n        this.setState(prevState => ({\n          posts: postsList,\n          pagesCount: postsList.length / prevState.postsPerPage,\n          isLoaded: true\n        }));\n      } catch (err) {\n        this.setState({\n          error: err\n        });\n      }\n    }, 3000);\n  }\n\n  changePage = pageNum => {\n    this.setState({\n      currentPage: pageNum\n    });\n  };\n\n  changePostsPerPage = event => {\n    const newPostPerPage = event.target.value;\n\n    this.setState(prevState => ({\n      postsPerPage: newPostPerPage,\n      pagesCount: Math.ceil(prevState.posts.length / newPostPerPage)\n    }));\n  };\n\n  spliceList = () => {\n    const { posts, currentPage, postsPerPage } = this.state;\n\n    return posts.slice(\n      currentPage * postsPerPage,\n      (currentPage + 1) * postsPerPage\n    );\n  };\n\n  nextPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.min(prevState.currentPage + 1, prevState.pagesCount - 1)\n    }));\n  };\n\n  prevPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.max(prevState.currentPage - 1, 0)\n    }));\n  };\n\n  render() {\n    const {\n      isLoaded,\n      error,\n      pagesCount,\n      currentPage,\n      postsPerPage\n    } = this.state;\n\n    const postsForRender = this.spliceList();\n\n    return (\n      <div className=\"App\">\n        <div className=\"myApp\">\n          <h1>Simple List</h1>\n          <label htmlFor=\"postsPerPage\" className=\"postsPerPage\">\n            Per page:\n            <select\n              defaultValue=\"10\"\n              name=\"postsPerPage\"\n              onChange={this.changePostsPerPage}\n            >\n              <option name=\"3\" id=\"\">\n                3\n              </option>\n              <option name=\"5\" id=\"\">\n                5\n              </option>\n              <option name=\"10\" id=\"\">\n                10\n              </option>\n              <option name=\"20\" id=\"\">\n                20\n              </option>\n            </select>\n          </label>\n          <ul className=\"list\">\n            {isLoaded ? (\n              postsForRender.map(post => (\n                <li className=\"list__item\" key={randomstring.generate(5)}>\n                  {`${post.id}.`}\n                  <span className=\"list__item--title\">{post.title}</span>\n                </li>\n              ))\n            ) : (\n              <LoadIcon />\n            )}\n          </ul>\n          <Pagination\n            currentPage={currentPage}\n            changePage={this.changePage}\n            nextPage={this.nextPage}\n            prevPage={this.prevPage}\n            pagesCount={pagesCount}\n            postsPerPage={postsPerPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}