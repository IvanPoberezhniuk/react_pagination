{"version":3,"sources":["components/Pagination.jsx","api/requests.js","App.jsx","index.js"],"names":["randomstring","require","Pagination","_ref","prevPage","nextPage","pagesCount","changePage","currentPage","postsPerPage","pagindationButtons","Array","fill","react_default","a","createElement","className","onClick","map","value","index","advancedButtons","concat","key","generate","URL","App","state","posts","error","isLoaded","pageNum","_this","setState","changePostsPerPage","event","newPostPerPage","target","prevState","Math","ceil","length","spliceList","_this$state","slice","min","max","fetch","then","res","json","postsList","this","err","_this$state2","postsForRender","htmlFor","defaultValue","name","onChange","id","post","title","components_Pagination","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e83737a2.chunk.js","sourcesContent":["import React from 'react';\r\nconst randomstring = require('randomstring');\r\n\r\nconst Pagination = ({\r\n  prevPage,\r\n  nextPage,\r\n  pagesCount,\r\n  changePage,\r\n  currentPage,\r\n  postsPerPage\r\n}) => {\r\n  const pagindationButtons = new Array(pagesCount).fill('');\r\n\r\n  const advancedButtons = index => {\r\n    switch (index) {\r\n      case 0:\r\n        return true;\r\n      case currentPage - 1:\r\n        return true;\r\n      case currentPage:\r\n        return true;\r\n      case currentPage + 1:\r\n        return true;\r\n      case postsPerPage - 1:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <li className=\"pagination__button\" onClick={prevPage}>\r\n        &laquo;\r\n      </li>\r\n      {pagindationButtons.map((value, index) =>\r\n        advancedButtons(index) ? (\r\n          <li\r\n            className={`pagination__button ${\r\n              currentPage === index ? 'pagination__button--active' : null\r\n            }`}\r\n            key={randomstring.generate(5)}\r\n            onClick={() => changePage(index)}\r\n          >\r\n            {index + 1}\r\n          </li>\r\n        ) : null\r\n      )}\r\n      <li className=\"pagination__button\" onClick={nextPage}>\r\n        &raquo;\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","const URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = () => fetch(`${URL}/posts`).then(res => res.json());\nexport const getUsers = () => fetch(`${URL}/users`).then(res => res.json());\nexport const getCom = () => fetch(`${URL}/comments`).then(res => res.json());\n","import React from 'react';\nimport './App.scss';\nimport Pagination from './components/Pagination';\nimport { getPosts } from './api/requests';\n\nconst randomstring = require('randomstring');\n\nclass App extends React.Component {\n  state = {\n    posts: [],\n    error: null,\n    isLoaded: false,\n    currentPage: 0,\n    postsPerPage: 10,\n    pagesCount: ''\n  };\n\n  async componentDidMount() {\n    const postsList = await getPosts();\n\n    try {\n      this.setState(prevState => ({\n        posts: postsList,\n        pagesCount: postsList.length / prevState.postsPerPage,\n        isLoaded: true\n      }));\n    } catch (err) {\n      this.setState({\n        error: err\n      });\n    }\n  }\n\n  changePage = pageNum => {\n    this.setState({\n      currentPage: pageNum\n    });\n  };\n\n  changePostsPerPage = event => {\n    const newPostPerPage = event.target.value;\n\n    this.setState(prevState => ({\n      postsPerPage: newPostPerPage,\n      pagesCount: Math.ceil(prevState.posts.length / newPostPerPage)\n    }));\n  };\n\n  spliceList = () => {\n    const { posts, currentPage, postsPerPage } = this.state;\n\n    return posts.slice(\n      currentPage * postsPerPage,\n      (currentPage + 1) * postsPerPage\n    );\n  };\n\n  nextPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.min(prevState.currentPage + 1, prevState.pagesCount - 1)\n    }));\n  };\n\n  prevPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.max(prevState.currentPage - 1, 0)\n    }));\n  };\n\n  render() {\n    const {\n      isLoaded,\n      error,\n      pagesCount,\n      currentPage,\n      postsPerPage\n    } = this.state;\n\n    const postsForRender = this.spliceList();\n\n    return (\n      <div className=\"App\">\n        <div className=\"myApp\">\n          <h1>Simple List</h1>\n          <label htmlFor=\"postsPerPage\" className=\"postsPerPage\">\n            Per page:\n            <select\n              defaultValue=\"10\"\n              name=\"postsPerPage\"\n              onChange={this.changePostsPerPage}\n            >\n              <option name=\"3\" id=\"\">\n                3\n              </option>\n              <option name=\"5\" id=\"\">\n                5\n              </option>\n              <option name=\"10\" id=\"\">\n                10\n              </option>\n              <option name=\"20\" id=\"\">\n                20\n              </option>\n            </select>\n          </label>\n          <ul className=\"list\">\n            {isLoaded\n              ? postsForRender.map(post => (\n                  <li className=\"list__item\" key={randomstring.generate(5)}>\n                    {`${post.id}.`}\n                    <span className=\"list__item--title\">{post.title}</span>\n                  </li>\n                ))\n              : error}\n          </ul>\n          <Pagination\n            currentPage={currentPage}\n            changePage={this.changePage}\n            nextPage={this.nextPage}\n            prevPage={this.prevPage}\n            pagesCount={pagesCount}\n            postsPerPage={postsPerPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}