{"version":3,"sources":["components/LoadIcon.jsx","components/Pagination.jsx","api/requests.js","App.jsx","index.js"],"names":["LoadIcon","react_default","a","createElement","className","randomstring","require","Pagination","_ref","page","prevPage","nextPage","pagesCount","changePage","currentPage","pageButtons","onClick","map","value","index","concat","key","generate","parseInt","URL","App","state","posts","isLoaded","postsPerPage","pageNum","_this","setState","changePostsPerPage","event","newPostPerPage","target","prevState","Math","ceil","length","spliceList","_this$state","slice","min","max","_this2","this","setTimeout","Object","asyncToGenerator","regenerator_default","mark","_callee","postsList","wrap","_context","prev","next","fetch","then","res","json","sent","err","error","stop","_this$state2","postsForRender","htmlFor","defaultValue","name","onChange","id","post","title","components_LoadIcon","components_Pagination","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6827aa47.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LoadIcon = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadIcon;\r\n","import React from 'react';\r\nconst randomstring = require('randomstring');\r\n\r\nconst Pagination = ({\r\n  prevPage,\r\n  nextPage,\r\n  pagesCount,\r\n  changePage,\r\n  currentPage\r\n}) => {\r\n  const fancyButtons = page => {\r\n    if (pagesCount < 6) {\r\n      return [1, 2, 3, 4, 5];\r\n    } else if (page < 4) {\r\n      return [1, 2, 3, 4, 5, '...', pagesCount];\r\n    } else if (page >= 4 && page < pagesCount - 4) {\r\n      return [1, '...', page, page + 1, page + 2, '...', pagesCount];\r\n    } else {\r\n      return [\r\n        1,\r\n        '...',\r\n        pagesCount - 4,\r\n        pagesCount - 3,\r\n        pagesCount - 2,\r\n        pagesCount - 1,\r\n        pagesCount\r\n      ];\r\n    }\r\n  };\r\n\r\n  const pageButtons = fancyButtons(currentPage);\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <li className=\"pagination__button\" onClick={prevPage}>\r\n        &laquo;\r\n      </li>\r\n      {pageButtons.map((value, index) => (\r\n        <li\r\n          className={`pagination__button ${\r\n            currentPage + 1 === value ? 'pagination__button--active' : null\r\n          }`}\r\n          key={randomstring.generate(5)}\r\n          onClick={parseInt(value, 10) ? () => changePage(value - 1) : null}\r\n        >\r\n          {value}\r\n        </li>\r\n      ))}\r\n      <li className=\"pagination__button\" onClick={nextPage}>\r\n        &raquo;\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","const URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = () => fetch(`${URL}/posts`).then(res => res.json());\nexport const getUsers = () => fetch(`${URL}/users`).then(res => res.json());\nexport const getCom = () => fetch(`${URL}/comments`).then(res => res.json());\n","import React from 'react';\nimport './App.scss';\nimport LoadIcon from './components/LoadIcon';\nimport Pagination from './components/Pagination';\nimport { getPosts } from './api/requests';\n\nconst randomstring = require('randomstring');\n\nclass App extends React.Component {\n  state = {\n    posts: [],\n    isLoaded: false,\n    currentPage: 0,\n    postsPerPage: 10,\n    pagesCount: ''\n  };\n\n  componentDidMount() {\n    // 3ms response simulation\n    setTimeout(async () => {\n      const postsList = await getPosts();\n\n      try {\n        this.setState(prevState => ({\n          posts: postsList,\n          pagesCount: postsList.length / prevState.postsPerPage,\n          isLoaded: true\n        }));\n      } catch (err) {\n        this.setState({\n          error: err\n        });\n      }\n    }, 1000);\n  }\n\n  changePage = pageNum => {\n    this.setState({\n      currentPage: pageNum\n    });\n  };\n\n  changePostsPerPage = event => {\n    const newPostPerPage = event.target.value;\n\n    this.setState(prevState => ({\n      postsPerPage: newPostPerPage,\n      pagesCount: Math.ceil(prevState.posts.length / newPostPerPage)\n    }));\n  };\n\n  spliceList = () => {\n    const { posts, currentPage, postsPerPage } = this.state;\n\n    return posts.slice(\n      currentPage * postsPerPage,\n      (currentPage + 1) * postsPerPage\n    );\n  };\n\n  nextPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.min(prevState.currentPage + 1, prevState.pagesCount - 1)\n    }));\n  };\n\n  prevPage = () => {\n    this.setState(prevState => ({\n      currentPage: Math.max(prevState.currentPage - 1, 0)\n    }));\n  };\n\n  render() {\n    const { isLoaded, pagesCount, currentPage, postsPerPage } = this.state;\n    const postsForRender = this.spliceList();\n\n    return (\n      <div className=\"App\">\n        <div className=\"myApp\">\n          <h1>Simple List</h1>\n          <label htmlFor=\"postsPerPage\" className=\"postsPerPage\">\n            Per page:\n            <select\n              defaultValue=\"10\"\n              name=\"postsPerPage\"\n              onChange={this.changePostsPerPage}\n            >\n              <option name=\"3\" id=\"\">\n                3\n              </option>\n              <option name=\"5\" id=\"\">\n                5\n              </option>\n              <option name=\"10\" id=\"\">\n                10\n              </option>\n              <option name=\"20\" id=\"\">\n                20\n              </option>\n            </select>\n          </label>\n          <ul className=\"list\">\n            {isLoaded ? (\n              postsForRender.map(post => (\n                <li className=\"list__item\" key={randomstring.generate(5)}>\n                  {`${post.id}.`}\n                  <span className=\"list__item--title\">{post.title}</span>\n                </li>\n              ))\n            ) : (\n              <LoadIcon />\n            )}\n          </ul>\n          <Pagination\n            currentPage={currentPage}\n            changePage={this.changePage}\n            nextPage={this.nextPage}\n            prevPage={this.prevPage}\n            pagesCount={pagesCount}\n            postsPerPage={postsPerPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}